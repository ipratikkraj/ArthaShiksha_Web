@inherits LayoutComponentBase
@using ArthaShikshaWeb.Services
@inject IMenuService MenuService
@inject ISessionStorageService Session
@inject NavigationManager NavigationManager

<div class="main-layout">
    @* @if (!sidebarCollapsed && isMobileView)
    {
        <div class="sidebar-overlay" @onclick="ToggleSidebar"></div>
    }
 *@
    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="loading-spinner"></div>
            <div>Loading...</div>
        </div>
    }
    else
    {
        <aside class="sidebar @(sidebarCollapsed ? "collapsed" : "")">
            <div class="sidebar-header">
                @if (!sidebarCollapsed)
                {
                    <div class="sidebar-brand-group">
                        <img src="logo.png" alt="Logo" class="logo" />
                        <div class="brand">
                            <div class="brand-title">Artha Shiksha</div>
                            <div class="brand-subtitle">AI for e-Learning</div>
                        </div>
                    </div>
                }
                <button class="sidebar-toggle" @onclick="ToggleSidebar">
                    <span class="material-icons">menu</span>
                </button>
            </div>

            <nav class="sidebar-nav">
                <ul>
                    @foreach (var menuItem in authorizedMenuItems)
                    {
                        <li>
                            <NavLink href="@menuItem.Path" class="sidebar-link" ActiveClass="active">
                                <span class="material-icons">@menuItem.Icon</span>
                                @if (!sidebarCollapsed)
                                {
                                    <span>@menuItem.Name</span>
                                }
                            </NavLink>
                        </li>
                    }
                </ul>
            </nav>

            <div class="sidebar-footer">
                <div class="sidebar-footer-section notification-section">
                    <span class="material-icons notification-icon">notifications</span>
                    @if (!sidebarCollapsed)
                    {
                        <span>Notifications</span>
                    }
                </div>
                <div class="sidebar-footer-section support-section">
                    <span class="material-icons support-icon">forum</span>
                    @if (!sidebarCollapsed)
                    {
                        <span>Community &amp; Support</span>
                    }
                </div>
                @if (!sidebarCollapsed)
                {
                    <div class="sidebar-user">
                        <img src="@userImageUrl" alt="@userName" class="user-avatar" />
                        <div>
                            <div class="user-name">@userName</div>
                            <div class="user-email">@userEmail</div>
                        </div>
                        <span class="material-icons logout-icon" @onclick="HandleLogout">logout</span>
                    </div>
                }
                else
                {
                    <div class="sidebar-user-collapsed">
                        <img src="@userImageUrl" alt="@userName" class="user-avatar-collapsed" />
                    </div>
                }
            </div>
        </aside>
        
        <main class="main-content">
            @Body
        </main>
        <div class="feedback-tab">Feedback</div>
    }
</div>

@code {
    private bool sidebarCollapsed = false;
    private bool isLoading = true;
    private List<MenuItem> authorizedMenuItems = new();
    private string userName = "";
    private string userEmail = "";
    private string userImageUrl = "avatar.png";

    //private bool isMobileView => Browser.WindowWidth < 768;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            Console.WriteLine("MainLayout initialization started");
            if (!await CheckAuthentication())
            {
                Console.WriteLine("Authentication check failed");
                return;
            }

            await LoadUserData();
            await LoadMenuItems();
            Console.WriteLine("MainLayout initialization completed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in MainLayout initialization: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckAuthentication()
    {
        try
        {
            var userId = await Session.GetItemAsStringAsync("UserSessionUserId");
            var clientId = await Session.GetItemAsStringAsync("UserSessionCompanyId");
            var roleId = await Session.GetItemAsStringAsync("UserSessionRoleId");

            Console.WriteLine($"Auth Check - UserId: {userId}, ClientId: {clientId}, RoleId: {roleId}");

            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("No user ID found, redirecting to login");
                NavigationManager.NavigateTo("/login", true);
                return false;
            }
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication check error: {ex.Message}");
            NavigationManager.NavigateTo("/login", true);
            return false;
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            userName = await Session.GetItemAsStringAsync("UserSessionUserName") ?? "User";
            userEmail = await Session.GetItemAsStringAsync("UserSessionEmail") ?? "";
            var imageUrl = await Session.GetItemAsStringAsync("UserSessionImageURL");
            userImageUrl = !string.IsNullOrEmpty(imageUrl) ? imageUrl : "avatar.png";
        }
        catch
        {
            // Use default values if session access fails
            userName = "User";
            userEmail = "";
            userImageUrl = "avatar.png";
        }
    }

    private async Task LoadMenuItems()
    {
        try
        {
            Console.WriteLine("Loading menu items...");
            authorizedMenuItems = await MenuService.GetAuthorizedMenuItemsAsync();
            Console.WriteLine($"Loaded {authorizedMenuItems.Count} menu items");
            
            // Debug output
            foreach (var item in authorizedMenuItems)
            {
                Console.WriteLine($"Menu item: {item.Name}, Path: {item.Path}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading menu items: {ex.Message}");
            authorizedMenuItems = new List<MenuItem>();
        }
        StateHasChanged();
    }

    private void ToggleSidebar() => sidebarCollapsed = !sidebarCollapsed;

    private async Task HandleLogout()
    {
        try
        {
            await Session.ClearAsync();
        }
        finally
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }
}

<style>
.main-layout {
    display: flex;
    height: 100vh;
    width: 100vw;
    background: linear-gradient(135deg, #f5f7fa 0%, #e8ecf1 100%);
    overflow: hidden;
}
.sidebar {
    width: 270px;
    min-width: 270px;
    height: 100vh;
    background: #fff;
    border-right: 2px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    transition: width 0.2s;
    box-shadow: none;
    position: fixed; /* Change to fixed */
    left: 0;
    top: 0;
    overflow: hidden; /* Prevent sidebar overflow */
}
.sidebar.collapsed {
    width: 60px;
    min-width: 60px;
}
.sidebar-header {
    position: sticky;
    top: 0;
    background: #fff;
    z-index: 10;
    border-bottom: 1px solid #e5e7eb;
    min-height: 60px;
    padding: 18px 18px 10px 18px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.sidebar-brand-group {
    display: flex;
    align-items: center;
    gap: 10px;
}
.sidebar.collapsed .sidebar-header {
    justify-content: center;
    padding: 10px 0 10px 0;
}
.sidebar.collapsed .sidebar-brand-group,
.sidebar.collapsed .logo,
.sidebar.collapsed .brand,
.sidebar.collapsed .brand-title,
.sidebar.collapsed .brand-subtitle {
    display: none !important;
}
.sidebar-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
}
.logo {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    object-fit: contain;
}
.brand {
    display: flex;
    flex-direction: column;
    margin-left: 4px;
}
.brand-title {
    font-weight: 700;
    font-size: 1.1rem;
    color: #22223b;
    line-height: 1.1;
}
.brand-subtitle {
    font-size: 0.85rem;
    color: #4f7df3;
    font-weight: 500;
    line-height: 1.1;
}
.sidebar-nav {
    flex: 1;
    overflow-y: auto; /* Enable scrolling */
    overflow-x: hidden;
    margin-top: 10px;
    padding-bottom: 10px; /* Add padding to prevent content hiding behind footer */
}
.sidebar-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 2px;
}
.sidebar-nav li {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 18px;
    color: #22223b;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 8px;
    margin: 0 8px;
    transition: background 0.2s, color 0.2s, border 0.2s;
    border: 2px solid transparent;
    background: transparent;
}
.sidebar.collapsed .sidebar-nav li {
    justify-content: center;
    padding: 10px 0;
    gap: 0;
    margin: 0 4px;
}
.sidebar.collapsed .sidebar-nav li span:not(.material-icons) {
    display: none;
}
.sidebar-nav li.active, .sidebar-nav li:hover {
    background: #f5f7fa;
    color: #4f7df3;
    border: 2px solid #4f7df3;
}
.sidebar.collapsed .sidebar-nav li.active, .sidebar.collapsed .sidebar-nav li:hover {
    background: #f5f7fa;
    color: #4f7df3;
    border: 2px solid #4f7df3;
}
.sidebar-link {
    display: flex;
    align-items: center;
    gap: 12px;
    color: #22223b;
    font-size: 1rem;
    font-weight: 400;
    text-decoration: none;
    width: 100%;
    height: 100%;
    transition: color 0.2s;
}

/* Remove underline for all states */
.sidebar-link,
.sidebar-link:visited,
.sidebar-link:active {
    text-decoration: none;
}

/* Active and hover state for NavLink */
.sidebar-link.active,
.sidebar-link:hover {
    color: #2563eb !important; /* blue-600 */
    text-decoration: none;
}

.sidebar-link.active .material-icons,
.sidebar-link:hover .material-icons {
    color: #2563eb !important;
}

/* Optional: keep icon color default for inactive */
.sidebar-link .material-icons {
    color: #8a8a99;
    transition: color 0.2s;
}
.sidebar-footer {
    position: sticky;
    bottom: 0;
    background: #fff;
    border-top: 1.5px solid #e5e7eb;
    padding: 0 0 18px 0;
    margin-top: auto;
    z-index: 10;
}
.sidebar-footer-section {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 18px;
    color: #6b7280;
    font-size: 1rem;
    cursor: pointer;
    min-height: 40px;
    transition: background 0.2s, color 0.2s;
}
.sidebar-footer-section:hover {
    background: #f5f7fa;
    color: #4f7df3;
}
.sidebar.collapsed .sidebar-footer-section span:not(.material-icons) {
    display: none;
}
.sidebar.collapsed .sidebar-footer-section {
    justify-content: center;
    padding: 10px 0;
    gap: 0;
}
.sidebar-user {
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 12px 18px 0 18px;
    background: #f5f7fa;
    border: 2px solid #4f7df3;
    border-radius: 8px;
    padding: 8px 10px;
}
.sidebar.collapsed .sidebar-user {
    display: none !important;
}
.sidebar-user-collapsed {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    width: 100%;
    margin-top: 16px;
    margin-bottom: 4px;
}
.user-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: #e0e7ff;
}
.user-avatar-collapsed {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: #e0e7ff;
    margin: 0 auto;
    display: block;
}
.user-name {
    font-weight: 600;
    font-size: 1rem;
    color: #22223b;
}
.user-email {
    font-size: 0.85rem;
    color: #4f7df3;
}
.logout-icon {
    margin-left: auto;
    color: #4f7df3;
    cursor: pointer;
}
.main-content {
    margin-left: 270px; /* Match sidebar width */
    flex: 1;
    height: 100vh;
    overflow-y: auto;
    overflow-x: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0;
    transition: margin-left 0.2s;
}

/* Adjust main content margin when sidebar is collapsed */
.sidebar.collapsed + .main-content {
    margin-left: 60px;
}



.feedback-tab {
    position: fixed;
    right: 0;
    top: 50%;
    transform: translateY(-50%) rotate(-90deg);
    background: #fff;
    color: #4f7df3;
    border: 1.5px solid #e5e7eb;
    border-radius: 6px 6px 0 0;
    padding: 6px 18px;
    font-size: 0.95rem;
    cursor: pointer;
    z-index: 100;
    box-shadow: 0 2px 8px rgba(79, 125, 243, 0.08);
}

/* Center icons in collapsed sidebar */
.sidebar.collapsed .sidebar-nav li,
.sidebar.collapsed .sidebar-link {
    justify-content: center !important;
    align-items: center !important;
    text-align: center;
    padding-left: 0 !important;
    padding-right: 0 !important;
}

/* Hide text in collapsed sidebar for NavLink as well */
.sidebar.collapsed .sidebar-link span:not(.material-icons) {
    display: none !important;
}

/* Only color the icon when active/hover in collapsed mode */
.sidebar.collapsed .sidebar-link.active .material-icons,
.sidebar.collapsed .sidebar-link:hover .material-icons,
.sidebar.collapsed li.active .material-icons,
.sidebar.collapsed li:hover .material-icons {
    color: #2563eb !important;
}

/* Keep icon color default for inactive */
.sidebar.collapsed .sidebar-link .material-icons,
.sidebar.collapsed li .material-icons {
    color: #8a8a99 !important;
    transition: color 0.2s;
}

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #4f7df3;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
}


</style>