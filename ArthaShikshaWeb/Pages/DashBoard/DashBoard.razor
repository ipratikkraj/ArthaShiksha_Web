@page "/dashboard"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@implements IDisposable

<PageTitle>Dashboard - Learniflex</PageTitle>

<div class="dashboard-page fade-in">
    <!-- Dashboard Header -->
    <section class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1 class="page-title">
                    Welcome back, @CurrentUser.FirstName! 👋
                </h1>
                <p class="page-subtitle">
                    Here's what's happening with your educational platform today
                </p>
            </div>
            <div class="header-actions">
                <div class="date-info">
                    <i class="fas fa-calendar-alt"></i>
                    <span>@DateTime.Now.ToString("MMM dd, yyyy")</span>
                </div>
                <button class="btn btn-primary" @onclick="RefreshDashboard">
                    <i class="fas fa-sync-alt @(IsRefreshing ? "fa-spin" : "")"></i>
                    Refresh
                </button>
            </div>
        </div>
    </section>

    @if (IsLoading)
    {
        <DashboardSkeleton />
    }
    else
    {
        <!-- Quick Stats -->
        <section class="stats-section">
            <div class="stats-grid">
                @foreach (var stat in DashboardStats)
                {
                    <StatCard 
                        Title="@stat.Title"
                        Value="@stat.Value"
                        Change="@stat.Change"
                        ChangeType="@stat.ChangeType"
                        Icon="@stat.Icon"
                        Color="@stat.Color"
                        OnClick="@(() => NavigateToDetail(stat.NavigationPath))" />
                }
            </div>
        </section>

        <!-- Main Content Grid -->
        <section class="dashboard-content">
            <div class="content-grid">
                <!-- Activities Widget -->
                <div class="content-card">
                    <ActivityWidget 
                        Activities="@RecentActivities"
                        IsLoading="@IsActivitiesLoading"
                        OnRefresh="@RefreshActivities"
                        OnViewAll="@(() => NavigateToDetail("/activities"))" />
                </div>

                <!-- Quick Actions Widget -->
                <div class="content-card">
                    <QuickActionsWidget 
                        Actions="@QuickActions"
                        OnActionClick="@HandleQuickAction" />
                </div>

                <!-- Performance Chart -->
                <div class="content-card full-width">
                    <PerformanceChartWidget 
                        ChartData="@PerformanceData"
                        IsLoading="@IsChartLoading"
                        OnPeriodChange="@HandlePeriodChange" />
                </div>

                <!-- Recent Enrollments -->
                <div class="content-card">
                    <RecentEnrollmentsWidget 
                        Enrollments="@RecentEnrollments"
                        OnViewAll="@(() => NavigateToDetail("/enrollments"))" />
                </div>

                <!-- Pending Tasks -->
                <div class="content-card">
                    <PendingTasksWidget 
                        Tasks="@PendingTasks"
                        OnTaskAction="@HandleTaskAction"
                        OnViewAll="@(() => NavigateToDetail("/tasks"))" />
                </div>
            </div>
        </section>
    }
</div>

@code {
    // State Management
    private bool IsLoading { get; set; } = true;
    private bool IsRefreshing { get; set; } = false;
    private bool IsActivitiesLoading { get; set; } = false;
    private bool IsChartLoading { get; set; } = false;
    
    // Data Properties
    private List<StatCardModel> DashboardStats { get; set; } = new();
    private List<ActivityModel> RecentActivities { get; set; } = new();
    private List<QuickActionModel> QuickActions { get; set; } = new();
    private List<EnrollmentModel> RecentEnrollments { get; set; } = new();
    private List<TaskModel> PendingTasks { get; set; } = new();
    private ChartDataModel PerformanceData { get; set; } = new();
    
    // User Information
    private UserModel CurrentUser { get; set; } = new()
    {
        FirstName = "Jessica",
        LastName = "Pearson",
        Role = "Administrator"
    };

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("dashboard.initialize");
        }
    }

    // Data Loading Methods
    private async Task LoadDashboardData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            // Simulate concurrent data loading
            var tasks = new List<Task>
            {
                LoadStatsData(),
                LoadActivitiesData(),
                LoadQuickActionsData(),
                LoadEnrollmentsData(),
                LoadTasksData(),
                LoadPerformanceData()
            };

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            await HandleError("Failed to load dashboard data", ex);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadStatsData()
    {
        // Simulate API call
        await Task.Delay(500);
        
        DashboardStats = new List<StatCardModel>
        {
            new()
            {
                Title = "Total Students",
                Value = "2,347",
                Change = "+12%",
                ChangeType = ChangeType.Positive,
                Icon = "fas fa-user-graduate",
                Color = "blue",
                NavigationPath = "/student-management"
            },
            new()
            {
                Title = "Active Courses",
                Value = "156",
                Change = "+5%",
                ChangeType = ChangeType.Positive,
                Icon = "fas fa-book",
                Color = "green",
                NavigationPath = "/course-management"
            },
            new()
            {
                Title = "Faculty Members",
                Value = "89",
                Change = "+2%",
                ChangeType = ChangeType.Positive,
                Icon = "fas fa-chalkboard-teacher",
                Color = "purple",
                NavigationPath = "/faculty-management"
            },
            new()
            {
                Title = "Revenue",
                Value = "₹24.5L",
                Change = "+18%",
                ChangeType = ChangeType.Positive,
                Icon = "fas fa-rupee-sign",
                Color = "orange",
                NavigationPath = "/financial-management"
            }
        };
    }

    private async Task LoadActivitiesData()
    {
        await Task.Delay(300);
        
        RecentActivities = new List<ActivityModel>
        {
            new()
            {
                Id = 1,
                Title = "New student enrollment completed",
                Description = "John Doe enrolled in Computer Science program",
                Timestamp = DateTime.Now.AddMinutes(-15),
                Type = ActivityType.Enrollment,
                User = "System"
            },
            new()
            {
                Id = 2,
                Title = "Course curriculum updated",
                Description = "Advanced Java programming course content revised",
                Timestamp = DateTime.Now.AddHours(-2),
                Type = ActivityType.Course,
                User = "Dr. Smith"
            },
            new()
            {
                Id = 3,
                Title = "Faculty member added",
                Description = "Prof. Johnson joined Mathematics department",
                Timestamp = DateTime.Now.AddHours(-4),
                Type = ActivityType.Faculty,
                User = "HR Team"
            }
        };
    }

    private async Task LoadQuickActionsData()
    {
        await Task.Delay(200);
        
        QuickActions = new List<QuickActionModel>
        {
            new()
            {
                Id = "add-student",
                Title = "Add Student",
                Description = "Enroll new student",
                Icon = "fas fa-user-plus",
                Color = "blue",
                Path = "/student-management/add"
            },
            new()
            {
                Id = "create-course",
                Title = "Create Course",
                Description = "Design new course",
                Icon = "fas fa-book-plus",
                Color = "green",
                Path = "/course-management/create"
            },
            new()
            {
                Id = "schedule-class",
                Title = "Schedule Class",
                Description = "Add to timetable",
                Icon = "fas fa-calendar-plus",
                Color = "purple",
                Path = "/timetable-management/schedule"
            },
            new()
            {
                Id = "generate-report",
                Title = "Generate Report",
                Description = "Create analytics report",
                Icon = "fas fa-chart-line",
                Color = "orange",
                Path = "/reports/generate"
            }
        };
    }

    private async Task LoadEnrollmentsData()
    {
        await Task.Delay(400);
        
        RecentEnrollments = new List<EnrollmentModel>
        {
            new()
            {
                Id = 1,
                StudentName = "Alice Johnson",
                CourseName = "Data Science Fundamentals",
                EnrollmentDate = DateTime.Now.AddDays(-1),
                Status = EnrollmentStatus.Completed
            },
            new()
            {
                Id = 2,
                StudentName = "Bob Smith",
                CourseName = "Web Development Bootcamp",
                EnrollmentDate = DateTime.Now.AddDays(-2),
                Status = EnrollmentStatus.Pending
            },
            new()
            {
                Id = 3,
                StudentName = "Carol Davis",
                CourseName = "Machine Learning Advanced",
                EnrollmentDate = DateTime.Now.AddDays(-3),
                Status = EnrollmentStatus.Completed
            }
        };
    }

    private async Task LoadTasksData()
    {
        await Task.Delay(350);
        
        PendingTasks = new List<TaskModel>
        {
            new()
            {
                Id = 1,
                Title = "Review course applications",
                Description = "15 applications pending review",
                DueDate = DateTime.Now.AddDays(2),
                Priority = TaskPriority.High,
                Type = TaskType.Review
            },
            new()
            {
                Id = 2,
                Title = "Prepare monthly report",
                Description = "Generate academic performance report",
                DueDate = DateTime.Now.AddDays(5),
                Priority = TaskPriority.Medium,
                Type = TaskType.Report
            },
            new()
            {
                Id = 3,
                Title = "Faculty meeting preparation",
                Description = "Prepare agenda for quarterly meeting",
                DueDate = DateTime.Now.AddDays(7),
                Priority = TaskPriority.Low,
                Type = TaskType.Meeting
            }
        };
    }

    private async Task LoadPerformanceData()
    {
        await Task.Delay(600);
        
        PerformanceData = new ChartDataModel
        {
            Labels = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun" },
            Datasets = new[]
            {
                new DatasetModel
                {
                    Label = "Students Enrolled",
                    Data = new[] { 120, 150, 180, 220, 280, 320 },
                    Color = "#4A90E2"
                },
                new DatasetModel
                {
                    Label = "Courses Completed",
                    Data = new[] { 80, 95, 110, 140, 170, 200 },
                    Color = "#28A745"
                }
            }
        };
    }

    // Event Handlers
    private async Task RefreshDashboard()
    {
        IsRefreshing = true;
        StateHasChanged();
        
        try
        {
            await LoadDashboardData();
            await ShowNotification("Dashboard refreshed successfully", NotificationType.Success);
        }
        catch (Exception ex)
        {
            await HandleError("Failed to refresh dashboard", ex);
        }
        finally
        {
            IsRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task RefreshActivities()
    {
        IsActivitiesLoading = true;
        StateHasChanged();
        
        try
        {
            await LoadActivitiesData();
        }
        finally
        {
            IsActivitiesLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleQuickAction(string actionId)
    {
        var action = QuickActions.FirstOrDefault(a => a.Id == actionId);
        if (action != null)
        {
            await NavigateToDetail(action.Path);
        }
    }

    private async Task HandleTaskAction(int taskId, TaskAction action)
    {
        var task = PendingTasks.FirstOrDefault(t => t.Id == taskId);
        if (task == null) return;

        try
        {
            switch (action)
            {
                case TaskAction.Complete:
                    PendingTasks.Remove(task);
                    await ShowNotification($"Task '{task.Title}' completed", NotificationType.Success);
                    break;
                    
                case TaskAction.Postpone:
                    task.DueDate = task.DueDate.AddDays(1);
                    await ShowNotification($"Task '{task.Title}' postponed", NotificationType.Info);
                    break;
                    
                case TaskAction.View:
                    await NavigateToDetail($"/tasks/{taskId}");
                    break;
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await HandleError($"Failed to perform task action", ex);
        }
    }

    private async Task HandlePeriodChange(string period)
    {
        IsChartLoading = true;
        StateHasChanged();
        
        try
        {
            // Simulate loading data for different period
            await Task.Delay(800);
            await LoadPerformanceData();
        }
        finally
        {
            IsChartLoading = false;
            StateHasChanged();
        }
    }

    // Utility Methods
    private async Task NavigateToDetail(string path)
    {
        await JSRuntime.InvokeVoidAsync("window.open", path, "_blank");
    }

    private async Task ShowNotification(string message, NotificationType type)
    {
        await JSRuntime.InvokeVoidAsync("dashboard.showNotification", message, type.ToString().ToLower());
    }

    private async Task HandleError(string message, Exception ex)
    {
        await JSRuntime.InvokeVoidAsync("console.error", $"{message}: {ex.Message}");
        await ShowNotification(message, NotificationType.Error);
    }

    public void Dispose()
    {
        // Cleanup resources if needed
    }


    // Enums
    public enum ChangeType { Positive, Negative, Neutral }
    public enum ActivityType { Enrollment, Course, Faculty, System }
    public enum EnrollmentStatus { Pending, Completed, Cancelled }
    public enum TaskPriority { Low, Medium, High }
    public enum TaskType { Review, Report, Meeting, Administrative }
    public enum TaskAction { Complete, Postpone, View }
    public enum NotificationType { Success, Error, Warning, Info }

    // Models
    public record StatCardModel
    {
        public string Title { get; init; } = "";
        public string Value { get; init; } = "";
        public string Change { get; init; } = "";
        public ChangeType ChangeType { get; init; }
        public string Icon { get; init; } = "";
        public string Color { get; init; } = "";
        public string NavigationPath { get; init; } = "";
    }

    public record ActivityModel
    {
        public int Id { get; init; }
        public string Title { get; init; } = "";
        public string Description { get; init; } = "";
        public DateTime Timestamp { get; init; }
        public ActivityType Type { get; init; }
        public string User { get; init; } = "";
    }

    public record QuickActionModel
    {
        public string Id { get; init; } = "";
        public string Title { get; init; } = "";
        public string Description { get; init; } = "";
        public string Icon { get; init; } = "";
        public string Color { get; init; } = "";
        public string Path { get; init; } = "";
    }

    public record EnrollmentModel
    {
        public int Id { get; init; }
        public string StudentName { get; init; } = "";
        public string CourseName { get; init; } = "";
        public DateTime EnrollmentDate { get; init; }
        public EnrollmentStatus Status { get; init; }
    }

    public record TaskModel
    {
        public int Id { get; set; }
        public string Title { get; init; } = "";
        public string Description { get; init; } = "";
        public DateTime DueDate { get; set; }
        public TaskPriority Priority { get; init; }
        public TaskType Type { get; init; }
    }

    public record UserModel
    {
        public string FirstName { get; init; } = "";
        public string LastName { get; init; } = "";
        public string Role { get; init; } = "";
    }

    public record ChartDataModel
    {
        public string[] Labels { get; init; } = Array.Empty<string>();
        public DatasetModel[] Datasets { get; init; } = Array.Empty<DatasetModel>();
    }

    public record DatasetModel
    {
        public string Label { get; init; } = "";
        public int[] Data { get; init; } = Array.Empty<int>();
        public string Color { get; init; } = "";
    }

}
